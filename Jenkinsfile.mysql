pipeline {
  agent 'any'
  tools {
    jdk 'java8'
    maven 'maven'
  }
    parameters {
      choice(
        name: 'Environment',
        choices: ['dev','prod'],
        description: 'Choose Environment'
      )
    }
    stages {
        stage('Setup MySQL for Dev'){
            when {
                expression { params.Environment == 'dev' }
            } 
            stages {
                stage('Initialize Terraform') {
                    steps {                    
                        sh "cd terraform_code/terraform.dev && terraform init"
                    }
                }
                stage('Formatting') {
                    steps {
                        sh "cd terraform_code/terraform.dev && terraform fmt"
                    }
                }
                stage('Plan Terraform') {
                    steps {
                        sh "cd terraform_code/terraform.dev && terraform plan -out mytfplan"
                    }
                }
                stage('Conformation to Setup MySQL instance') {
                    steps {
                        input 'Please check and approve configurations to setup AWS infrastructure'
                    }
                }
                stage('Execute Terraform') {
                    steps {
                        sh "cd terraform_code/terraform.dev && terraform apply -auto-approve mytfplan" 
                    }
                }
	        stage('Archive IP') {
                    steps {
                        sh "cd terraform_code/terraform.dev && terraform output Instance_IP > instance_ip"
                        archiveArtifacts "terraform_code/terraform.dev/instance_ip"
                    }
                }
            }
        }
        stage('Setup MySQL for Prod'){
            when {
                expression { params.Environment == 'prod' }
            }
            stages {
                stage('Initialize Terraform') {
                    steps {
                        sh "cd terraform_code/terraform.prod && terraform init"
                    }
                }
                stage('Formatting') {
                    steps {
                        sh "cd terraform_code/terraform.prod && terraform fmt"
                    }
                }
                stage('Plan Terraform') {
                    steps {
                        sh "cd terraform_code/terraform.prod && terraform plan -out mytfplan"
                    }
                }
                stage('Conformation to Setup MySQL instance') {
                    steps {
                        input 'Please check and approve configurations to setup AWS infrastructure'
                    }
                }
                stage('Execute Terraform') {
                    steps {
                        sh "cd terraform_code/terraform.prod && terraform apply -auto-approve mytfplan"
                    }
                }
                stage('Archive IP') {
                    steps {
                        sh "cd terraform_code/terraform.prod && terraform output Instance_IP > instance_ip_prod"
                        archiveArtifacts "terraform_code/terraform.prod/instance_ip_prod"
                    }
                }
            }
        }
        stage('Confirmation to setup MySQL'){
            steps {
                input 'Please check and approve to setup MySQL through Ansible Playbook'
            }
        }
        stage('Execute Ansible Playbook on Dev') {
            when {
                expression { params.Environment == 'dev' }
            }
            steps {                
                sh 'hostip=$(cat terraform_code/terraform.dev/instance_ip) && cd mysql/ansible && ansible-playbook -i hosts mysqlsetup.yml --extra-vars "ansible_host=${hostip}"'
            }
        }
        stage('Execute Ansible Playbook on Prod') {
            when {
                expression { params.Environment == 'prod' }
            }
            steps {
                sh 'hostip=$(cat terraform_code/terraform.prod/instance_ip_prod) && cd mysql/ansible && ansible-playbook -i hosts mysqlsetup.yml --extra-vars "ansible_host=${hostip}"'
            }
        }
    }
}

